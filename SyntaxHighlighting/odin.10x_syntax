# Note (Wassimulator): this is a work in progress, it contains mistakes
# but covers quite a bit. I'm not that experienced in using regex or making
# these, so if someone finds obvious mistakes and better suggestions
# please update it!
# https://github.com/slynch8/10x/new/main/SyntaxHighlighting
#
#----------------------------------------------
# settings

Extensions:                  *.odin

BlockCommentStart:           /*
BlockCommentEnd:             */

Language.Comment:
REGEX(//.*)

#----------------------------------------------

Language.Brace:
TEXT({)
TEXT(})

Language.Bracket:
TEXT(()
TEXT())

Language.SquareBracket:
TEXT([)
TEXT(])

Language.SemiColon:
TEXT(;)

Language.Comma:
TEXT(,)

Language.Keyword:
WORD(import)
WORD(package)
WORD(proc)
WORD(return)
WORD(break)
WORD(continue)
WORD(if)
WORD(else)
WORD(when)
WORD(for)
WORD(in)
WORD(switch)
WORD(case)
WORD(fallthrough)
WORD(defer)
WORD(using)
WORD(struct)
WORD(union)
WORD(enum)
WORD(distinct)
WORD(typeid)
WORD(cast)
WORD(transmute)
WORD(auto_cast)
WORD(asm)
WORD(foreign)
WORD(map)
WORD(matrix)
WORD(bit_set)
WORD(do)
WORD(dynamic)
WORD(not_in)
WORD(or_else)
WORD(or_return)
WORD(context)
WORD(where)
# Built-in types
WORD(bool)
WORD(b8)
WORD(b16)
WORD(b32)
WORD(b64)
WORD(i8)
WORD(i16)
WORD(i32)
WORD(i64)
WORD(i128)
WORD(u8)
WORD(u16)
WORD(u32)
WORD(u64)
WORD(u128)
WORD(int)
WORD(uint)
WORD(uintptr)
WORD(f16)
WORD(f32)
WORD(f64)
WORD(rawptr)
WORD(string)
WORD(rune)
WORD(byte)
WORD(any)
WORD(complex64)
WORD(complex128)
WORD(quaternion128)
WORD(quaternion256)
# Literals / constants
WORD(nil)
WORD(true)
WORD(false)

Language.Operator:
TEXT(=)
TEXT(->)
TEXT(.)
TEXT(+)
TEXT(-)
TEXT(*)
TEXT(/)
TEXT(%)
TEXT(^)
TEXT(&)
TEXT(|)
TEXT(~)
TEXT(<<)
TEXT(>>)
TEXT(<)
TEXT(>)
TEXT(!)
TEXT(?)
TEXT(..)

#----------------------------------------------
Language.Class:
REGEX(:[^\S\r\n]*(?:\[[^\]]*\]|\^|\s+)([A-Za-z0-9_.]+))

Language.Keyword:
WORD(import)
WORD(package)
WORD(proc)

Language.Function:
# foo :: proc(...) { ... }
REGEX(^(\w+)\b\s*::\sproc)
# call site highlight: foo(...)
REGEX(\b([A-Za-z_]\w*)\()

Language.Variable:
REGEX(([a-zA-Z_]+\w*))

Language.Number:
REGEX((0[xX][a-zA-Z0-9]+))
REGEX((0[bB][0-9]+))
REGEX([0-9]+[fd]*[uUlLzZfFdD]*)
REGEX([0-9]+\.[0-9]*[fd]*[fFdD]*)
REGEX([0-9]*\.[0-9]+[fd]*[fFdD]*)

Language.Preprocessor:
REGEX(\s*#\s*[a-zA-Z_]+\w*)

# Language.Function:
# REGEX(\b([a-zA-Z_].*)::.*\()
# REGEX(\b([a-zA-Z_]+\w*)\()

#----------------------------------------------

Language.String:
REGEX(L?"[^"\\]*(?:\\.[^"\\]*)*")
REGEX(L?'[^'\\]*(?:\\.[^'\\]*)*')

Language.MemberVariable:
REGEX(\.([A-Za-z_]\w*))

Language.MemberFunction:
REGEX(\.([A-Za-z_]\w*)\()

#----------------------------------------------

Language.Operator:
TEXT(::)
TEXT(:=)
TEXT(:)
